#define DCSBIOS_DEFAULT_SERIAL
#include <DcsBios.h>
#include <FastLED.h>
#include <Adafruit_SSD1306.h>
#include <splash.h>
#include <Adafruit_GFX.h>
#include <gfxfont.h>

#define OLED_HEIGHT 32
#define OLED_WIDTH 128
#define OLED_RESET -1

Adafruit_SSD1306 display(OLED_WIDTH, OLED_HEIGHT, &Wire, OLED_RESET);

// fastled setup
#define NUM_LEDS 8
#define DATA_PIN 8
#define AOA_GREEN_LED 0
#define AOA_YELLOW_LED 1
#define AOA_RED_LED 2
CRGB leds[NUM_LEDS];

#define CONSOLE_LED_START 3
#define CONSOLE_LED_END 7
#define BRIGHTNESS 128 // this is the overall brightness of all the leds

// global variable for individual pixel brightness 0 - 255
int ledBrightness = 0; // 128 is random start number for brightness

int divideBrightness(int simBrightness) // 0 - 65535
{
  ledBrightness = simBrightness / 256; // Converts 0-65535 to 0-255
  return ledBrightness;
}

void changeBrightness(int simBrightness)
{
  for (int i = CONSOLE_LED_START; i <= CONSOLE_LED_END; i++)
  {
    leds[i].setHSV(96, 255, divideBrightness(simBrightness));
  }
}

void onConsoleIntLtChange(unsigned int newValue)
{
  changeBrightness(newValue);
  FastLED.show();
}
DcsBios::IntegerBuffer consoleIntLtBuffer(0x7558, 0xffff, 0, onConsoleIntLtChange);

void onAOAIndexerHighChange(unsigned int newValue)
{
  if (newValue == 1)
  {
    turnOnAOAIndexerHigh();
  }
  else
  {
    turnOffAOAIndexerHigh();
  }
  FastLED.show();
}
DcsBios::IntegerBuffer aoaIndexerHighBuffer(0x7408, 0x0008, 3, onAOAIndexerHighChange);

void onAOAIndexerLowChange(unsigned int newValue)
{
  if (newValue == 1)
  {
    turnOnAOAIndexerLow();
  }
  else
  {
    turnOffAOAIndexerLow();
  }
  FastLED.show();
}
DcsBios::IntegerBuffer aoaIndexerLowBuffer(0x7408, 0x0020, 5, onAOAIndexerLowChange);

void onAOAIndexerNormalChange(unsigned int newValue)
{
  if (newValue == 1)
  {
    turnOnAOAIndexerNormal();
  }
  else
  {
    turnOffAOAIndexerNormal();
  }
  FastLED.show();
}
DcsBios::IntegerBuffer aoaIndexerNormalBuffer(0x7408, 0x0010, 4, onAOAIndexerNormalChange);

void turnOnAOAIndexerHigh()
{
  leds[AOA_GREEN_LED] = CRGB::Green;
}
void turnOffAOAIndexerHigh()
{
  leds[AOA_GREEN_LED] = CRGB::Black;
}

void turnOnAOAIndexerLow()
{
  leds[AOA_RED_LED] = CRGB::Red;
}
void turnOffAOAIndexerLow()
{
  leds[AOA_RED_LED] = CRGB::Black;
}

void turnOnAOAIndexerOff()
{
  leds[AOA_YELLOW_LED] = CRGB::Yellow;
}
void turnOffAOAIndexerOff()
{
  leds[AOA_YELLOW_LED] = CRGB::Black;
}

void turnOnAOAIndexerNormal()
{
  leds[AOA_YELLOW_LED] = CRGB::Yellow;
}
void turnOffAOAIndexerNormal()
{
  leds[AOA_YELLOW_LED] = CRGB::Black;
}

// 'DCS-World-logo', 128x32px
const unsigned char epd_bitmap_DCS_World_logo[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x7e, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x01, 0xff, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x07, 0xff, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x0f, 0xfe, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x0f, 0xe0, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x1f, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x3f, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0x3e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x3c, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x0f, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x0f, 0x7c, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x7f, 0xfe, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x3f, 0xfe, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xff, 0xff, 0x3f, 0x7f, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0xdf, 0xff, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x7f, 0xff, 0xff, 0x7f, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 528)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char *epd_bitmap_allArray[1] = {
    epd_bitmap_DCS_World_logo};

// global variables for ufcfunctions
char ufcScratchpadString1Display[] = "";
char ufcScratchpadString2Display[] = "";
char ufcScratchpadNumberDisplay[] = "";

void get0x744e(char *s1)
{
  display.clearDisplay();
  // write to ufcScratchpadString1Display
  strcpy(ufcScratchpadString1Display, s1);
  writeUfcScratchpadStrings();
}
void get0x7450(char *s2)
{
  display.clearDisplay();
  // write to ufcScratchpadString2Display
  strcpy(ufcScratchpadString2Display, s2);
  writeUfcScratchpadStrings();
}
void get0x7446(char *s3)
{
  display.clearDisplay();
  // write to ufcScratchpadNumberDisplay
  strcpy(ufcScratchpadNumberDisplay, s3);
  // print all strings to display
  writeUfcScratchpadStrings();
}

void writeUfcScratchpadStrings()
{
  display.clearDisplay();
  display.display();
  // turn strings into single string
  String newString = String(ufcScratchpadString1Display) + String(ufcScratchpadString2Display) + String(ufcScratchpadNumberDisplay);
  // print to display
  display.setCursor(0, 0);
  display.print(newString);
  display.display();
}

DcsBios::StringBuffer<2> ufcScratchpadString1DisplayBuffer(0x744e, get0x744e);
DcsBios::StringBuffer<2> ufcScratchpadString2DisplayBuffer(0x7450, get0x7450);
DcsBios::StringBuffer<8> ufcScratchpadNumberDisplayBuffer(0x74446, get0x7446);

void setup()
{
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.drawBitmap(0, 0, epd_bitmap_allArray[0], 128, 32, 1);
  display.setTextSize(0.2);
  display.setTextColor(WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("DCS-BIOS\nF-18 OLED UFC");
  display.println("\nby: Guil-Baka");
  display.display();
  delay(2000);
  display.clearDisplay();
  display.display();

  // fastled setup
  // set all leds to off
  for (int i = 0; i < NUM_LEDS; i++)
  {
    leds[i] = CRGB::Black;
  }
  FastLED.setBrightness(BRIGHTNESS);
  FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);
  // dcsbios setup
  DcsBios::setup();
}
void loop()
{
  // put your main code here, to run repeatedly:
  DcsBios::loop();
}
